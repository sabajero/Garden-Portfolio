<!DOCTYPE html>
<!-- Add dark class here dynamically -->
<!-- FIXED: Removed h-full, added dark:bg-black -->
<html lang="en" class="bg-white dark:bg-black">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Artist Portfolio</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Add Tailwind dark mode config -->
    <script>
        tailwind.config = {
            darkMode: 'class', // Enable 'class' strategy for dark mode
            theme: {
                extend: {
                    // You can add custom theme settings here if needed
                    colors: {
                        'spring-green': '#00FF7F',
                    }
                }
            }
        }
    </script>
    <style>
        /* Simple fade-in transition */
        .content-section {
            display: none;
            animation: fadeIn 0.5s;
        }
        .content-section.active {
            display: block;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Dark mode toggle switch styles */
        .toggle-switch {
            width: 40px;
            height: 22px;
            position: relative;
            display: inline-block;
        }
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 22px;
        }
        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .toggle-slider {
            background-color: #00FF7F; /* Spring Green */
        }
        input:checked + .toggle-slider:before {
            transform: translateX(18px);
        }
    </style>
</head>
<!-- FIXED: Removed h-full -->
<body class="font-sans antialiased text-gray-900 bg-white dark:bg-black dark:text-gray-200">
    
    <!-- Main Site Wrapper -->
    <div id="main-wrapper" class="flex flex-col min-h-screen">
        <!-- Header / Navigation -->
        <header class="sticky top-0 bg-white/95 backdrop-blur-sm z-10 dark:bg-black/95">
            <nav class="container mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-16">
                <!-- Your Name (now a button, styles matched) -->
                <button id="name-btn" class="text-lg font-medium">
                    Jerónimo
                </button>
                
                <!-- Navigation Buttons -->
                <div class="flex items-center space-x-6">
                    <!-- Standard Nav -->
                    <div class="hidden sm:flex items-center space-x-6">
                        <!-- RENAMED: Home to Garden -->
                        <button id="garden-btn" data-key="nav_garden" class="text-lg font-medium text-spring-green dark:text-spring-green hover:text-gray-500 dark:hover:text-gray-400">Garden</button>
                        <button id="works-btn" data-key="nav_works" class="text-lg font-medium text-gray-700 dark:text-gray-400 hover:text-gray-500 dark:hover:text-gray-400">Works</button>
                        <button id="about-btn" data-key="nav_about" class="text-lg font-medium text-gray-700 dark:text-gray-400 hover:text-gray-500 dark:hover:text-gray-400">About</button>
                    </div>

                    <!-- View Toggle Button -->
                    <button id="toggle-view-btn" data-key="toggle_boring" class="px-4 py-1.5 text-sm font-medium bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
                        Boring
                    </button>

                    <!-- Language Selector -->
                    <div class="relative group">
                        <div id="lang-main" class="w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-600 dark:text-gray-400 cursor-pointer">
                            EN
                        </div>
                        <!-- Dropdown -->
                        <div class="absolute right-0 top-full mt-2 w-max p-2 space-y-2 bg-white dark:bg-gray-800 border dark:border-gray-700 hidden group-hover:block">
                            <div id="lang-en" class="w-6 h-6 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-600 dark:text-gray-400 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">EN</div>
                            <div id="lang-es" class="w-6 h-6 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-600 dark:text-gray-400 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">ES</div>
                            <!-- FIXED: Changed class_name to class -->
                            <div id="lang-de" class="w-6 h-6 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center text-xs font-bold text-gray-600 dark:text-gray-400 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">DE</div>
                        </div>
                    </div>

                    <!-- Dark Mode Toggle -->
                    <label for="dark-mode-toggle" class="toggle-switch">
                        <input type="checkbox" id="dark-mode-toggle">
                        <span class="toggle-slider"></span>
                    </label>
                </div>
            </nav>
        </header>

        <!-- Main Content Area -->
        <main id="main-content" class="container mx-auto px-4 sm:px-6 lg:px-8 py-8 flex-grow">

            <!-- RENAMED: "Home" to "Garden" Page View (Blank) -->
            <section id="garden-page" class="content-section active">
                <!-- This is intentionally blank for your future GIF -->
                <div class="w-full h-[75vh]">
                    <!-- You can add your GIF/animation here later -->
                </div>
            </section>

            <!-- "Normal" Portfolio View -->
            <section id="normal-portfolio" class="content-section"> <!-- "active" class removed -->
                
                <!-- NEW: Tag Filter Container -->
                <div id="tag-filter-container" class="flex flex-wrap gap-2 mb-8">
                    <!-- JS will populate this with tag buttons -->
                </div>

                <div id="normal-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
                    <!-- JS will populate this -->
                </div>
            </section>

            <!-- "About" Page View -->
            <section id="about-page" class="content-section">
                <div class="max-w-3xl mx-auto">
                    <h2 data-key="about_title" class="text-3xl font-bold mb-6">About Me</h2>
                    <div class="space-y-4 text-lg text-gray-700 dark:text-gray-300">
                        <p data-key="about_p1">This is the about page. Replace this with your own biography, artist statement, or contact information.</p>
                        <p data-key="about_p2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
                    </div>
                </div>
            </section>

            <!-- "Simplified" Portfolio View -->
            <section id="simple-portfolio" class="content-section">
                <div class="flex flex-col md:flex-row gap-8">
                    <!-- Left Column: Project List -->
                    <div class="w-full md:w-1/3 lg:w-1/4">
                        <ul id="simple-project-list" class="space-y-3">
                            <!-- JS will populate this -->
                        </ul>
                    </div>
                    <!-- Right Column: Project Details -->
                    <div id="simple-project-image-container" class="w-full md:w-2/3 lg:w-3/4 sticky top-24 self-start">
                        <!-- JS will populate this -->
                    </div>
                </div>
            </section>

        </main>

        <!-- Footer -->
        <!-- FIXED: Added bg-white dark:bg-black to ensure footer has a background in both modes -->
        <footer class="bg-white dark:bg-black border-t border-gray-200 dark:border-gray-800 mt-16">
            <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-6 text-center text-sm text-gray-500 dark:text-gray-400">
                &copy; <span id="current-year"></span> Jerónimo. <span data-key="footer_rights">All rights reserved.</span>
            </div>
        </footer>
    </div>

    <!-- COMPLETE SCRIPT BLOCK -->
    <script>
        // --- DATA ---
        // This is where you'll edit your project information
        
        // --- NEW: Helper function to generate random tags ---
        const allTags = ["Design", "Work", "Personal"];
        function getRandomTags() {
            const tags = new Set(); // Use a Set to avoid duplicates
            // Add 1 or 2 tags
            tags.add(allTags[Math.floor(Math.random() * allTags.length)]);
            if (Math.random() > 0.5) {
                tags.add(allTags[Math.floor(Math.random() * allTags.length)]);
            }
            return Array.from(tags); // Convert Set back to Array
        }

        // --- NEW: 20 Simulated Projects ---
        const portfolioData = [
            { id: 1, title: "Rosa rubiginosa", year: 2024, medium: "Illustrator", description: "A logo concept.", thumbnail: "https://placehold.co/600x400/D81B60/FFFFFF?text=Rosa+rubiginosa", tags: getRandomTags() },
            { id: 2, title: "Lavandula angustifolia", year: 2024, medium: "Oil Painting", description: "Personal series.", thumbnail: "https://placehold.co/600x400/8E24AA/FFFFFF?text=Lavandula", tags: getRandomTags() },
            { id: 3, title: "Helianthus annuus", year: 2023, medium: "Photography", description: "Client photoshoot.", thumbnail: "https://placehold.co/600x400/FDD835/000000?text=Helianthus", tags: getRandomTags() },
            { id: 4, title: "Gerbera jamesonii", year: 2023, medium: "Figma", description: "Web design mockups.", thumbnail: "https://placehold.co/600x400/E53935/FFFFFF?text=Gerbera", tags: getRandomTags() },
            { id: 5, title: "Begonia cucullata", year: 2022, medium: "Mixed Media", description: "Gallery installation.", thumbnail: "https://placehold.co/600x400/00897B/FFFFFF?text=Begonia", tags: getRandomTags() },
            { id: 6, title: "Dianthus caryophyllus", year: 2022, medium: "Illustrator", description: "Brand identity.", thumbnail: "https://placehold.co/600x400/F4511E/FFFFFF?text=Dianthus", tags: getRandomTags() },
            { id: 7, title: "Paeonia lactiflora", year: 2021, medium: "Watercolor", description: "Book illustration.", thumbnail: "https://placehold.co/600x400/F06292/000000?text=Paeonia", tags: getRandomTags() },
            { id: 8, title: "Zinnia elegans", year: 2021, medium: "Video", description: "Short film.", thumbnail: "https://placehold.co/600x400/C0CA33/000000?text=Zinnia", tags: getRandomTags() },
            { id: 9, title: "Lantana camara", year: 2024, medium: "3D Model", description: "Product render.", thumbnail: "https://placehold.co/600x400/FB8C00/FFFFFF?text=Lantana", tags: getRandomTags() },
            { id: 10, title: "Salvia splendens", year: 2020, medium: "Charcoal", description: "Portrait series.", thumbnail: "https://placehold.co/600x400/B71C1C/FFFFFF?text=Salvia", tags: getRandomTags() },
            { id: 11, title: "Viola tricolor", year: 2023, medium: "Figma", description: "App UI/UX.", thumbnail: "https://placehold.co/600x400/5E35B1/FFFFFF?text=Viola", tags: getRandomTags() },
            { id: 12, title: "Petunia × atkinsiana", year: 2022, medium: "Illustrator", description: "Iconography set.", thumbnail: "https://placehold.co/600x400/7B1FA2/FFFFFF?text=Petunia", tags: getRandomTags() },
            { id: 13, title: "Ageratum houstonianum", year: 2021, medium: "Photography", description: "Event photography.", thumbnail: "https://placehold.co/600x400/1E88E5/FFFFFF?text=Ageratum", tags: getRandomTags() },
            { id: 14, title: "Calendula officinalis", year: 2020, medium: "Oil Painting", description: "Personal work.", thumbnail: "https://placehold.co/600x400/FFB300/000000?text=Calendula", tags: getRandomTags() },
            { id: 15, title: "Catharanthus roseus", year: 2024, medium: "Mixed Media", description: "Personal exploration.", thumbnail: "https://placehold.co/600x400/EC407A/FFFFFF?text=Catharanthus", tags: getRandomTags() },
            { id: 16, title: "Gazania rigens", year: 2023, medium: "Illustrator", description: "Logo design.", thumbnail: "https://placehold.co/600x400/F57C00/FFFFFF?text=Gazania", tags: getRandomTags() },
            { id: 17, title: "Lobelia erinus", year: 2022, medium: "Figma", description: "Website redesign.", thumbnail: "https://placehold.co/600x400/0277BD/FFFFFF?text=Lobelia", tags: getRandomTags() },
            { id: 18, title: "Tagetes erecta", year: 2021, medium: "Photography", description: "Product shots.", thumbnail: "https://placehold.co/600x400/FFA000/000000?text=Tagetes", tags: getRandomTags() },
            { id: 19, title: "Verbena × hybrida", year: 2020, medium: "Oil Painting", description: "Landscape series.", thumbnail: "https://placehold.co/600x400/6A1B9A/FFFFFF?text=Verbena", tags: getRandomTags() },
            { id: 20, title: "Impatiens walleriana", year: 2024, medium: "Watercolor", description: "Private commission.", thumbnail: "https://placehold.co/600x400/D32F2F/FFFFFF?text=Impatiens", tags: getRandomTags() }
        ];

        // --- TRANSLATIONS ---
        // This is your new "dictionary" for languages
        const translations = {
            'en': {
                'nav_garden': 'Garden',
                'nav_works': 'Works',
                'nav_about': 'About',
                'toggle_boring': 'Boring',
                'toggle_fun': 'Fun',
                'about_title': 'About Me',
                'about_p1': 'This is the about page. Replace this with your own biography, artist statement, or contact information.',
                'about_p2': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',
                'footer_rights': 'All rights reserved.',
                'filter_all': 'All' // NEW
            },
            'es': {
                'nav_garden': 'Jardín',
                'nav_works': 'Obras',
                'nav_about': 'Sobre Mí',
                'toggle_boring': 'Aburrido',
                'toggle_fun': 'Divertido',
                'about_title': 'Sobre Mí',
                'about_p1': 'Esta es la página "Sobre Mí". Reemplaza esto con tu propia biografía, declaración de artista o información de contacto.',
                'about_p2': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',
                'footer_rights': 'Todos los derechos reservados.',
                'filter_all': 'Todos' // NEW
            },
            'de': {
                'nav_garden': 'Garten',
                'nav_works': 'Arbeiten',
                'nav_about': 'Über Mich',
                'toggle_boring': 'Langweilig',
                'toggle_fun': 'Spaß',
                'about_title': 'Über Mich',
                'about_p1': 'Dies ist die "Über mich"-Seite. Ersetzen Sie dies durch Ihre eigene Biografie, Ihr Künstler-Statement oder Ihre Kontaktinformationen.',
                'about_p2': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',
                'footer_rights': 'Alle Rechte vorbehalten.',
                'filter_all': 'Alle' // NEW
            }
        };

        // --- APPLICATION STATE ---
        const state = {
            isSimple: false, // "Boring" view is off by default
            currentView: 'garden-page', // 'garden-page', 'normal-portfolio' or 'about-page'
            selectedSimpleProject: portfolioData.length > 0 ? portfolioData[0].id : null, // Default to showing the first project in simple view
            currentLanguage: 'en', // ADDED: Default language
            currentTag: 'all' // NEW: For tag filtering
        };

        // --- DOM ELEMENTS ---
        const mainContent = document.getElementById('main-content');
        const sections = mainContent.querySelectorAll('.content-section');
        const nameBtn = document.getElementById('name-btn'); // ADDED
        const gardenBtn = document.getElementById('garden-btn'); // RENAMED
        const worksBtn = document.getElementById('works-btn');
        const aboutBtn = document.getElementById('about-btn');
        const toggleBtn = document.getElementById('toggle-view-btn');
        const darkModeToggle = document.getElementById('dark-mode-toggle');

        // Language Elements
        const langMain = document.getElementById('lang-main');
        const langEn = document.getElementById('lang-en');
        const langEs = document.getElementById('lang-es');
        const langDe = document.getElementById('lang-de');

        // Simple Portfolio Elements
        const simpleProjectList = document.getElementById('simple-project-list');
        const simpleProjectImageContainer = document.getElementById('simple-project-image-container');

        // Normal Portfolio Elements
        const normalGrid = document.getElementById('normal-grid');
        const tagFilterContainer = document.getElementById('tag-filter-container'); // NEW

        // --- RENDER FUNCTIONS ---
        
        /**
         * Main render function to update the view based on the current state
         */
        function render() {
            // Update button text using translation
            toggleBtn.textContent = state.isSimple ? translations[state.currentLanguage].toggle_fun : translations[state.currentLanguage].toggle_boring;
            
            // Toggle active state for page navigation buttons
            gardenBtn.classList.toggle('text-spring-green', !state.isSimple && state.currentView === 'garden-page'); // RENAMED
            gardenBtn.classList.toggle('text-gray-700', state.isSimple || state.currentView !== 'garden-page'); // RENAMED
            gardenBtn.classList.toggle('dark:text-spring-green', !state.isSimple && state.currentView === 'garden-page'); // RENAMED
            gardenBtn.classList.toggle('dark:text-gray-400', state.isSimple || state.currentView !== 'garden-page'); // RENAMED

            worksBtn.classList.toggle('text-spring-green', !state.isSimple && state.currentView === 'normal-portfolio');
            worksBtn.classList.toggle('text-gray-700', state.isSimple || state.currentView !== 'normal-portfolio');
            worksBtn.classList.toggle('dark:text-spring-green', !state.isSimple && state.currentView === 'normal-portfolio');
            worksBtn.classList.toggle('dark:text-gray-400', state.isSimple || state.currentView !== 'normal-portfolio');
            
            aboutBtn.classList.toggle('text-spring-green', !state.isSimple && state.currentView === 'about-page');
            aboutBtn.classList.toggle('text-gray-700', state.isSimple || state.currentView !== 'about-page');
            aboutBtn.classList.toggle('dark:text-spring-green', !state.isSimple && state.currentView === 'about-page');
            aboutBtn.classList.toggle('dark:text-gray-400', state.isSimple || state.currentView !== 'about-page');

            // Show/Hide page sections
            sections.forEach(section => {
                if (state.isSimple) {
                    // Simplified view is active
                    section.classList.toggle('active', section.id === 'simple-portfolio');
                } else {
                    // Normal view is active
                    section.classList.toggle('active', section.id === state.currentView);
                }
            });

            // Populate content for the active view
            if (state.isSimple) {
                renderSimplePortfolio();
            } else if (state.currentView === 'normal-portfolio') {
                renderNormalPortfolio();
            }
            // "About" page is static HTML, so no render function needed
            // "Garden" page is static HTML (blank), so no render function needed
        }

        /**
         * Populates the "Normal" portfolio grid
         */
        function renderNormalPortfolio() {
            // --- 1. RENDER TAGS ---
            tagFilterContainer.innerHTML = ''; // Clear tags
            
            // Get all unique tags
            const allTags = new Set();
            portfolioData.forEach(p => p.tags.forEach(tag => allTags.add(tag)));
            const sortedTags = [...allTags].sort();

            // Create "All" button
            const allBtn = document.createElement('button');
            allBtn.textContent = translations[state.currentLanguage].filter_all; // Use translation
            // NEW: Active/inactive styling
            allBtn.className = `px-3 py-1 text-sm font-medium rounded-full ${state.currentTag === 'all' 
                ? 'bg-spring-green text-black' 
                : 'bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700'}`;
            allBtn.onclick = () => {
                state.currentTag = 'all';
                render(); // Re-render
            };
            tagFilterContainer.appendChild(allBtn);

            // Create buttons for each tag
            sortedTags.forEach(tag => {
                const tagBtn = document.createElement('button');
                tagBtn.textContent = tag;
                // NEW: Active/inactive styling
                tagBtn.className = `px-3 py-1 text-sm font-medium rounded-full ${state.currentTag === tag 
                    ? 'bg-spring-green text-black' 
                    : 'bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700'}`;
                tagBtn.onclick = () => {
                    state.currentTag = tag;
                    render(); // Re-render
                };
                tagFilterContainer.appendChild(tagBtn);
            });

            // --- 2. RENDER FILTERED GRID ---
            normalGrid.innerHTML = ''; // Clear existing grid
            
            // Sort by year, newest first
            const sortedProjects = [...portfolioData].sort((a, b) => b.year - a.year);

            // NEW: Filter projects based on the current tag
            const filteredProjects = state.currentTag === 'all'
                ? sortedProjects
                : sortedProjects.filter(p => p.tags.includes(state.currentTag));

            // Render the grid (using filteredProjects)
            filteredProjects.forEach(project => {
                const item = document.createElement('div');
                item.className = 'space-y-2'; // Container for image + text block
                item.innerHTML = `
                    <img src="${project.thumbnail}" alt="${project.title}" class="w-full h-64 object-cover border border-gray-200 dark:border-gray-700 dark:opacity-80">
                    <div>
                        <h3 class="text-lg font-bold">${project.title}</h3>
                        <p class="text-sm text-gray-600 dark:text-gray-400">${project.year} - ${project.medium}</p>
                    </div>
                `;
                normalGrid.appendChild(item);
            });
        }

        /**
         * Populates the "Simplified" portfolio view
         */
        function renderSimplePortfolio() {
            // 1. Populate project list
            simpleProjectList.innerHTML = ''; // Clear list
            
            // Sort by year, newest first (chronological)
            const sortedProjects = [...portfolioData].sort((a, b) => b.year - a.year);
            
            // NEW: Check if there are any projects
            if (sortedProjects.length === 0) {
                simpleProjectList.innerHTML = `<li class="text-gray-500">No projects to display.</li>`;
                simpleProjectImageContainer.innerHTML = ''; // Clear image
                return;
            }

            sortedProjects.forEach(project => {
                const li = document.createElement('li');
                const button = document.createElement('button');
                button.className = `w-full text-left ${project.id === state.selectedSimpleProject ? 'font-bold text-spring-green' : 'hover:text-gray-500 dark:hover:text-gray-400'}`;
                button.innerHTML = `
                    <span class="block">${project.title}</span>
                    <span class="block text-xs text-gray-500 dark:text-gray-400">${project.year} - ${project.medium}</span>
                `;
                button.onclick = () => {
                    state.selectedSimpleProject = project.id;
                    render(); // Re-render to show selection
                };
                li.appendChild(button);
                simpleProjectList.appendChild(li);
            });

            // 2. Populate selected project details
            // NEW: Ensure a project is actually selected
            let selectedProject = portfolioData.find(p => p.id === state.selectedSimpleProject);

            // If the selected project is no longer valid (e.g. data empty), default to first
            if (!selectedProject && portfolioData.length > 0) {
                state.selectedSimpleProject = portfolioData[0].id;
                selectedProject = portfolioData[0];
            }
            
            if (selectedProject) {
                
                // 3. Populate project image
                simpleProjectImageContainer.innerHTML = ''; // Clear image
                const img = document.createElement('img');
                // Use the project's thumbnail as the single image
                img.src = selectedProject.thumbnail; 
                img.alt = `${selectedProject.title} image`;
                // Use max-h to prevent image from being excessively tall
                img.className = 'w-full max-h-[75vh] object-cover border border-gray-200 dark:border-gray-700 dark:opacity-80'; 
                simpleProjectImageContainer.appendChild(img);
            }
        }

        // --- NEW TRANSLATION FUNCTION ---
        /**
         * Updates all text on the page based on the current language
         */
        function translatePage() {
            // Find all elements with a 'data-key'
            document.querySelectorAll('[data-key]').forEach(element => {
                const key = element.getAttribute('data-key');
                const translation = translations[state.currentLanguage][key];
                
                if (translation) {
                    element.textContent = translation;
                }
            });
            // Special case: The toggle button text is set in render()
            // so we call render() to update it
            // NEW: And the tag buttons are re-rendered in renderNormalPortfolio
            render();
        }

        // --- EVENT LISTENERS ---
        nameBtn.addEventListener('click', () => { // ADDED
            state.isSimple = false;
            state.currentView = 'garden-page';
            render();
        });

        gardenBtn.addEventListener('click', () => { // RENAMED
            state.isSimple = false;
            state.currentView = 'garden-page';
            render();
        });

        worksBtn.addEventListener('click', () => {
            state.isSimple = false;
            state.currentView = 'normal-portfolio';
            render();
        });

        aboutBtn.addEventListener('click', () => {
            state.isSimple = false;
            state.currentView = 'about-page';
            render();
        });

        toggleBtn.addEventListener('click', () => {
            state.isSimple = !state.isSimple;
            // If we're toggling back to "normal", default to the 'garden' view
            if (!state.isSimple) {
                state.currentView = 'garden-page';
            }
            render();
        });

        // --- LANGUAGE SELECTOR ---
        langEn.addEventListener('click', () => {
            langMain.textContent = 'EN';
            state.currentLanguage = 'en'; // Set state
            translatePage(); // Call translate
            console.log('Language set to EN');
        });

        langEs.addEventListener('click', () => {
            langMain.textContent = 'ES';
            state.currentLanguage = 'es'; // Set state
            translatePage(); // Call translate
            console.log('Language set to ES');
        });

        langDe.addEventListener('click', () => {
            langMain.textContent = 'DE';
            state.currentLanguage = 'de'; // Set state
            translatePage(); // Call translate
            console.log('Language set to DE');
        });

        // --- DARK MODE ---
        const htmlElement = document.documentElement;

        // Check for saved theme in localStorage
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            htmlElement.classList.add('dark');
            darkModeToggle.checked = true;
        } else {
            htmlElement.classList.remove('dark');
            darkModeToggle.checked = false;
        }

        // Listen for toggle change
        darkModeToggle.addEventListener('change', () => {
            if (darkModeToggle.checked) {
                htmlElement.classList.add('dark');
                localStorage.theme = 'dark';
            } else {
                htmlElement.classList.remove('dark');
                localStorage.theme = 'light';
            }
        });

        // --- FOOTER YEAR ---
        document.getElementById('current-year').textContent = new Date().getFullYear();

        // --- INITIAL RENDER ---
        // Run the render function AND translate function on page load
        render();
        translatePage(); // Call this to set the initial text

    </script>
</body>
</html>


